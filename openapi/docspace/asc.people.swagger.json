{
  "openapi": "3.0.1",
  "info": {
    "title": "ASC.People",
    "version": "v2"
  },
  "servers": [
    {
      "url": "http://localhost:8092",
      "description": "Local server"
    }
  ],
  "paths": {
    "/api/2.0/group": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get groups",
        "description": "Returns the general information about all the groups, such as group ID and group manager.\n\n **Note**: This method returns partial group information.",
        "operationId": "getGroups",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "ebc00c61-5c0a-480c-adb2-446da529aa5d"
            }
          },
          {
            "name": "manager",
            "in": "query",
            "description": "Specifies if the user is a manager or not",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of groups",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Add a new group",
        "operationId": "addGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.GroupRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.GroupRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.GroupRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Newly created group with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Adds a new group with the group manager, name, and members specified in the request."
      }
    },
    "/api/2.0/group/{id}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get a group",
        "description": "Returns the detailed information about the selected group.\n\n **Note**: This method returns full group information.",
        "operationId": "getGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "6fcb6dfb-4245-463a-856c-0abdaedc26fa"
            }
          },
          {
            "name": "includeMembers",
            "in": "query",
            "description": "Include members",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              }
            }
          },
          "404": {
            "description": "Group not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Update a group",
        "operationId": "updateGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54aa9123-a285-406a-b029-313baceff8a9"
            }
          }
        ],
        "requestBody": {
          "description": "Update group parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateGroupRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateGroupRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateGroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated group with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              }
            }
          },
          "404": {
            "description": "Group not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Updates the existing group changing the group manager, name, and/or members."
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Delete a group",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "121d0068-0248-4510-8cc8-45e31e32fcab"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.NoContentResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.NoContentResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.NoContentResult"
                }
              }
            }
          },
          "404": {
            "description": "Group not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Deletes a group with the ID specified in the request from the list of groups on the portal."
      }
    },
    "/api/2.0/group/user/{userid}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get user groups",
        "operationId": "getByUserId",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "70c9ccda-66d5-466a-884f-6cbbfcdd1ef3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of groups",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.GroupSummaryDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.GroupSummaryDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.GroupSummaryDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Returns a list of groups for the user with the ID specified in the request."
      }
    },
    "/api/2.0/group/{fromid}/members/{toid}": {
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Move group members",
        "operationId": "transferMembersTo",
        "parameters": [
          {
            "name": "fromId",
            "in": "path",
            "description": "Group ID to move from",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
            }
          },
          {
            "name": "toId",
            "in": "path",
            "description": "Group ID to move to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              }
            }
          },
          "404": {
            "description": "Group not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Moves all the members from the selected group to another one specified in the request."
      }
    },
    "/api/2.0/group/{id}/members": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Replace group members",
        "operationId": "setMembersTo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a6cf80d0-5000-4162-bea6-d758906e5d61"
            }
          }
        ],
        "requestBody": {
          "description": "Members",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.MembersRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.MembersRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.MembersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Replaces the group members with those specified in the request."
      },
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Add group members",
        "operationId": "addMembersTo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "b4742ddb-01ec-4cd3-ad8b-5cc33a1a8b2c"
            }
          }
        ],
        "requestBody": {
          "description": "Members",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.MembersRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.MembersRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.MembersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              }
            }
          },
          "404": {
            "description": "Group not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Adds new group members to the group with the ID specified in the request."
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Remove group members",
        "operationId": "removeMembersFrom",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "6f13950e-8940-4ec0-92f4-0b454788bcf4"
            }
          }
        ],
        "requestBody": {
          "description": "Members",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.MembersRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.MembersRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.MembersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              }
            }
          },
          "404": {
            "description": "Group not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Removes the group members specified in the request from the selected group."
      }
    },
    "/api/2.0/group/{id}/manager": {
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Set a group manager",
        "operationId": "setManager",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "3097313b-3ed4-487b-aa36-593bb8acdfb3"
            }
          }
        ],
        "requestBody": {
          "description": "Set manager",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.SetManagerRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.SetManagerRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.SetManagerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Sets a user with the ID specified in the request as a group manager."
      }
    },
    "/api/2.0/group/room/{id}": {
      "get": {
        "tags": [
          "Group / Rooms"
        ],
        "summary": "Gets groups with shared",
        "operationId": "getGroupsWithShared",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 8892
            }
          },
          {
            "name": "excludeShared",
            "in": "query",
            "description": "Exclude shared",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.GroupDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Gets groups with shared"
      }
    },
    "/api/2.0/people/{userid}/contacts": {
      "delete": {
        "tags": [
          "People / Contacts"
        ],
        "summary": "Delete user contacts",
        "operationId": "deleteMemberContacts",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2570"
            }
          }
        ],
        "requestBody": {
          "description": "Contacts",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.ContactsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.ContactsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.ContactsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deleted user profile with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Deletes the contacts of the user with the ID specified in the request from the portal."
      },
      "post": {
        "tags": [
          "People / Contacts"
        ],
        "summary": "Set user contacts",
        "operationId": "setMemberContacts",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "4640"
            }
          }
        ],
        "requestBody": {
          "description": "Contacts",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.ContactsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.ContactsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.ContactsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated user profile with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Sets the contacts of the user with the ID specified in the request replacing the current portal data with the new data."
      },
      "put": {
        "tags": [
          "People / Contacts"
        ],
        "summary": "Update user contacts",
        "operationId": "updateMemberContacts",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "4833"
            }
          }
        ],
        "requestBody": {
          "description": "Contacts",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.ContactsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.ContactsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.ContactsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated user profile with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Updates the contact information of the user with the ID specified in the request merging the new data into the current portal data."
      }
    },
    "/api/2.0/people/guests": {
      "delete": {
        "tags": [
          "People / Guests"
        ],
        "summary": "Removes guests from the list and from rooms",
        "operationId": "deleteGuests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request parameters for deleting guests"
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Removes guests from the list and excludes them from rooms to which you have invited them"
      }
    },
    "/api/2.0/people/{userid}/password": {
      "put": {
        "tags": [
          "People / Password"
        ],
        "summary": "Change a user password",
        "operationId": "changeUserPassword",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "185126b0-251e-4365-8193-d465ba6e25c9"
            }
          }
        ],
        "requestBody": {
          "description": "Member base",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.MemberBaseRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.MemberBaseRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.MemberBaseRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Detailed user information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect email"
          },
          "403": {
            "description": "The invitation link is invalid or its validity has expired"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Sets a new password to the user with the ID specified in the request."
      }
    },
    "/api/2.0/people/password": {
      "post": {
        "tags": [
          "People / Password"
        ],
        "summary": "Remind a user password",
        "operationId": "sendUserPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.EmailMemberRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.EmailMemberRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.EmailMemberRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email with the password",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "No permissions to perform this action"
          }
        },
        "description": "Reminds a password to the user using the email address specified in the request."
      }
    },
    "/api/2.0/people/{userid}/photo/thumbnails": {
      "post": {
        "tags": [
          "People / Photos"
        ],
        "summary": "Create photo thumbnails",
        "operationId": "createMemberPhotoThumbnails",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "9022"
            }
          }
        ],
        "requestBody": {
          "description": "Thumbnails",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.ThumbnailsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.ThumbnailsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.ThumbnailsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Thumbnail parameters",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.ThumbnailsDataDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.ThumbnailsDataDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.ThumbnailsDataDto"
                }
              }
            }
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Creates photo thumbnails by coordinates of the original image specified in the request."
      }
    },
    "/api/2.0/people/{userid}/photo": {
      "delete": {
        "tags": [
          "People / Photos"
        ],
        "summary": "Delete a user photo",
        "operationId": "deleteMemberPhoto",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "4777"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thumbnail parameters: original photo, retina, maximum size photo, big, medium, small",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.ThumbnailsDataDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.ThumbnailsDataDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.ThumbnailsDataDto"
                }
              }
            }
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Deletes a photo of the user with the ID specified in the request."
      },
      "get": {
        "tags": [
          "People / Photos"
        ],
        "summary": "Get a user photo",
        "operationId": "getMemberPhoto",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1752"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thumbnail parameters: original photo, retina, maximum size photo, big, medium, small",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.ThumbnailsDataDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.ThumbnailsDataDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.ThumbnailsDataDto"
                }
              }
            }
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Returns a photo of the user with the ID specified in the request."
      },
      "put": {
        "tags": [
          "People / Photos"
        ],
        "summary": "Update a user photo",
        "operationId": "updateMemberPhoto",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "8524"
            }
          }
        ],
        "requestBody": {
          "description": "Update photo",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdatePhotoMemberRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdatePhotoMemberRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdatePhotoMemberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated thumbnail parameters: original photo, retina, maximum size photo, big, medium, small",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.ThumbnailsDataDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.ThumbnailsDataDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.ThumbnailsDataDto"
                }
              }
            }
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Updates a photo of the user with the ID specified in the request."
      },
      "post": {
        "tags": [
          "People / Photos"
        ],
        "summary": "Upload a user photo",
        "operationId": "uploadMemberPhoto",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "4326"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "formCollection": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/System.Collections.Generic.KeyValuePair.System.String.Microsoft.Extensions.Primitives.StringValues"
                    },
                    "description": "Image data"
                  }
                }
              },
              "encoding": {
                "formCollection": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result of file uploading",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.FileUploadResultDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.FileUploadResultDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.FileUploadResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Uploads a photo of the user with the ID specified in the request."
      }
    },
    "/api/2.0/people/tokendiagnostics": {
      "get": {
        "tags": [
          "People / Profiles"
        ],
        "summary": "Gets claims",
        "operationId": "getClaims",
        "responses": {
          "200": {
            "description": "Claims",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Gets claims"
      }
    },
    "/api/2.0/people": {
      "post": {
        "tags": [
          "People / Profiles"
        ],
        "summary": "Add a user",
        "operationId": "addMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.MemberRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.MemberRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.MemberRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Newly added user with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "403": {
            "description": "The invitation link is invalid or its validity has expired"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Adds a new portal user with the first name, last name, email address, and several optional parameters specified in the request."
      },
      "get": {
        "tags": [
          "People / Profiles"
        ],
        "summary": "Get profiles",
        "operationId": "getAll",
        "responses": {
          "200": {
            "description": "List of users with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Returns a list of profiles for all the portal users."
      }
    },
    "/api/2.0/people/invite": {
      "post": {
        "tags": [
          "People / Profiles"
        ],
        "summary": "Invite users",
        "operationId": "inviteUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.InviteUsersRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.InviteUsersRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.InviteUsersRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeDto"
                }
              }
            }
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Invites users specified in the request to the current portal."
      },
      "put": {
        "tags": [
          "People / Profiles"
        ],
        "summary": "Resend activation emails",
        "operationId": "resendUserInvites",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of users with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Resends emails to the users who have not activated their emails."
      }
    },
    "/api/2.0/people/{userid}": {
      "delete": {
        "tags": [
          "People / Profiles"
        ],
        "summary": "Delete a user",
        "operationId": "deleteMember",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2572"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted user detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "403": {
            "description": "You don't have enough permission to perform the operation"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Deletes a user with the ID specified in the request from the portal."
      },
      "get": {
        "tags": [
          "People / Profiles"
        ],
        "summary": "Get a profile by user name",
        "operationId": "getById",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "9047"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed profile information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "400": {
            "description": "Incorect UserId"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Returns the detailed information about a profile of the user with the name specified in the request."
      },
      "put": {
        "tags": [
          "People / Profiles"
        ],
        "summary": "Update a user",
        "operationId": "updateMember",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "8251"
            }
          }
        ],
        "requestBody": {
          "description": "Update member",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMemberRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMemberRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMemberRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated user with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect user name"
          },
          "403": {
            "description": "You don't have enough permission to perform the operation"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Updates the data for the selected portal user with the first name, last name, email address, and/or optional parameters specified in the request."
      }
    },
    "/api/2.0/people/@self": {
      "delete": {
        "tags": [
          "People / Profiles"
        ],
        "summary": "Delete my profile",
        "operationId": "deleteProfile",
        "responses": {
          "200": {
            "description": "Detailed information about my profile",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "403": {
            "description": "You don't have enough permission to perform the operation"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Deletes the current user profile."
      },
      "get": {
        "tags": [
          "People / Profiles"
        ],
        "summary": "Get my profile",
        "operationId": "self",
        "responses": {
          "200": {
            "description": "Detailed information about my profile",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Returns the detailed information about the current user profile."
      }
    },
    "/api/2.0/people/email": {
      "get": {
        "tags": [
          "People / Profiles"
        ],
        "summary": "Get a profile by user email",
        "operationId": "getByEmail",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "User email address",
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string",
              "format": "email",
              "example": "Carlo_Schneider99@gmail.com"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed profile information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Returns the detailed information about a profile of the user with the email specified in the request."
      },
      "post": {
        "tags": [
          "People / Profiles"
        ],
        "summary": "Send instructions to change email",
        "operationId": "sendEmailChangeInstructions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMemberRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMemberRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMemberRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message text",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Incorrect userId or email"
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Sends a message to the user email with the instructions to change the email address connected to the portal."
      }
    },
    "/api/2.0/people/delete": {
      "put": {
        "tags": [
          "People / Profiles"
        ],
        "summary": "Delete users",
        "operationId": "removeUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of users with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Deletes a list of the users with the IDs specified in the request."
      }
    },
    "/api/2.0/people/{userid}/culture": {
      "put": {
        "tags": [
          "People / Profiles"
        ],
        "summary": "Update user language",
        "operationId": "updateMemberCulture",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "7024"
            }
          }
        ],
        "requestBody": {
          "description": "Update member",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMemberRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMemberRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMemberRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Detailed user information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "403": {
            "description": "You don't have enough permission to perform the operation"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Updates the user language with the parameter specified in the request."
      }
    },
    "/api/2.0/people/userquota": {
      "put": {
        "tags": [
          "People / Quota"
        ],
        "summary": "Change a user quota limit",
        "operationId": "updateUserQuota",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersQuotaRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersQuotaRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersQuotaRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of users with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "402": {
            "description": "Failed to set quota per user. The entered value is greater than the total DocSpace storage"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Changes a quota limit for the users with the IDs specified in the request."
      }
    },
    "/api/2.0/people/resetquota": {
      "put": {
        "tags": [
          "People / Quota"
        ],
        "summary": "Reset a user quota limit",
        "operationId": "resetUsersQuota",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersQuotaRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersQuotaRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersQuotaRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "402": {
            "description": "Your pricing plan does not support this option"
          },
          "403": {
            "description": "The invitation link is invalid or its validity has expired"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Resets a user quota limit with the ID specified in the request from the portal."
      }
    },
    "/api/2.0/accounts/room/{id}/search": {
      "get": {
        "tags": [
          "People / Search"
        ],
        "summary": "Gets accounts entries with shared",
        "operationId": "getAccountsEntriesWithShared",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 8355
            }
          },
          {
            "name": "employeeStatus",
            "in": "query",
            "description": "Employee status",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Users.EmployeeStatus"
            }
          },
          {
            "name": "activationStatus",
            "in": "query",
            "description": "Activation status",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Users.EmployeeActivationStatus"
            }
          },
          {
            "name": "excludeShared",
            "in": "query",
            "description": "Exclude shared",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "invitedByMe",
            "in": "query",
            "description": "Invited by me",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "inviterId",
            "in": "query",
            "description": "Inviter Id",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
            }
          },
          {
            "name": "area",
            "in": "query",
            "description": "Area",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Common.Core.Area"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Gets accounts entries with shared"
      }
    },
    "/api/2.0/people/status/{status}/search": {
      "get": {
        "tags": [
          "People / Search"
        ],
        "summary": "Search users by status filter",
        "operationId": "getAdvanced",
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "User status",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Users.EmployeeStatus"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search query",
            "schema": {
              "type": "string",
              "example": "some text"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Returns a list of users matching the status filter and search query."
      }
    },
    "/api/2.0/people/filter": {
      "get": {
        "tags": [
          "People / Search"
        ],
        "summary": "Search users and their information by extended filter",
        "operationId": "getFullByFilter",
        "parameters": [
          {
            "name": "employeeStatus",
            "in": "query",
            "description": "User status",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Users.EmployeeStatus"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Group ID",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
            }
          },
          {
            "name": "activationStatus",
            "in": "query",
            "description": "Activation status",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Users.EmployeeActivationStatus"
            }
          },
          {
            "name": "employeeType",
            "in": "query",
            "description": "User type",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Users.EmployeeType"
            }
          },
          {
            "name": "employeeTypes",
            "in": "query",
            "description": "List of user types",
            "style": "deepObject",
            "schema": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "enum": [
                      "All",
                      "RoomAdmin",
                      "Guest",
                      "DocSpaceAdmin",
                      "User"
                    ],
                    "type": "string",
                    "description": "[All - All, RoomAdmin - Room admin, Guest - Guest, DocSpaceAdmin - DocSpace admin, User - User]",
                    "example": "All"
                  },
                  {
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4
                    ],
                    "type": "integer",
                    "description": "[0 - All, 1 - Room admin, 2 - Guest, 3 - DocSpace admin, 4 - User]",
                    "example": 0
                  }
                ]
              }
            }
          },
          {
            "name": "isAdministrator",
            "in": "query",
            "description": "Specifies if the user is an administrator or not",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "payments",
            "in": "query",
            "description": "User payment status",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Payments"
            }
          },
          {
            "name": "accountLoginType",
            "in": "query",
            "description": "Account login type",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.AccountLoginType"
            }
          },
          {
            "name": "quotaFilter",
            "in": "query",
            "description": "Filter by quota (Default - 1, Custom - 2)",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.QuotaFilter"
            }
          },
          {
            "name": "withoutGroup",
            "in": "query",
            "description": "Specifies whether the user should be a member of a group or not",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "excludeGroup",
            "in": "query",
            "description": "Specifies whether or not the user should be a member of the group with the specified ID",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "invitedByMe",
            "in": "query",
            "description": "Invited by me",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "inviterId",
            "in": "query",
            "description": "Inviter Id",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
            }
          },
          {
            "name": "area",
            "in": "query",
            "description": "Area",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Common.Core.Area"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Returns a list of users with full information about them matching the parameters specified in the request."
      }
    },
    "/api/2.0/people/search": {
      "get": {
        "tags": [
          "People / Search"
        ],
        "summary": "Search users (using query parameters)",
        "operationId": "getPeopleSearch",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Search query",
            "schema": {
              "type": "string",
              "example": "some text"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Returns a list of users matching the search query. This method uses the query parameters."
      }
    },
    "/api/2.0/people/@search/{query}": {
      "get": {
        "tags": [
          "People / Search"
        ],
        "summary": "Search users",
        "operationId": "getSearch",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Search query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "some text"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Returns a list of users matching the search query."
      }
    },
    "/api/2.0/people/simple/filter": {
      "get": {
        "tags": [
          "People / Search"
        ],
        "summary": "Search users by extended filter",
        "operationId": "getSimpleByFilter",
        "parameters": [
          {
            "name": "employeeStatus",
            "in": "query",
            "description": "User status",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Users.EmployeeStatus"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Group ID",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
            }
          },
          {
            "name": "activationStatus",
            "in": "query",
            "description": "Activation status",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Users.EmployeeActivationStatus"
            }
          },
          {
            "name": "employeeType",
            "in": "query",
            "description": "User type",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Users.EmployeeType"
            }
          },
          {
            "name": "employeeTypes",
            "in": "query",
            "description": "List of user types",
            "style": "deepObject",
            "schema": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "enum": [
                      "All",
                      "RoomAdmin",
                      "Guest",
                      "DocSpaceAdmin",
                      "User"
                    ],
                    "type": "string",
                    "description": "[All - All, RoomAdmin - Room admin, Guest - Guest, DocSpaceAdmin - DocSpace admin, User - User]",
                    "example": "All"
                  },
                  {
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4
                    ],
                    "type": "integer",
                    "description": "[0 - All, 1 - Room admin, 2 - Guest, 3 - DocSpace admin, 4 - User]",
                    "example": 0
                  }
                ]
              }
            }
          },
          {
            "name": "isAdministrator",
            "in": "query",
            "description": "Specifies if the user is an administrator or not",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "payments",
            "in": "query",
            "description": "User payment status",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Payments"
            }
          },
          {
            "name": "accountLoginType",
            "in": "query",
            "description": "Account login type",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.AccountLoginType"
            }
          },
          {
            "name": "quotaFilter",
            "in": "query",
            "description": "Filter by quota (Default - 1, Custom - 2)",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.QuotaFilter"
            }
          },
          {
            "name": "withoutGroup",
            "in": "query",
            "description": "Specifies whether the user should be a member of a group or not",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "excludeGroup",
            "in": "query",
            "description": "Specifies whether or not the user should be a member of the group with the specified ID",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "invitedByMe",
            "in": "query",
            "description": "Invited by me",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "inviterId",
            "in": "query",
            "description": "Inviter Id",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
            }
          },
          {
            "name": "area",
            "in": "query",
            "description": "Area",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Common.Core.Area"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeDto"
                }
              }
            }
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Returns a list of users matching the parameters specified in the request."
      }
    },
    "/api/2.0/people/room/{id}": {
      "get": {
        "tags": [
          "People / Search"
        ],
        "summary": "Gets users with shared in room ID specified in request",
        "operationId": "getUsersWithRoomShared",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 3183
            }
          },
          {
            "name": "employeeStatus",
            "in": "query",
            "description": "Employee status",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Users.EmployeeStatus"
            }
          },
          {
            "name": "activationStatus",
            "in": "query",
            "description": "Activation status",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Users.EmployeeActivationStatus"
            }
          },
          {
            "name": "excludeShared",
            "in": "query",
            "description": "Exclude shared",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "invitedByMe",
            "in": "query",
            "description": "Invited by me",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "inviterId",
            "in": "query",
            "description": "Inviter Id",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
            }
          },
          {
            "name": "area",
            "in": "query",
            "description": "Area",
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Common.Core.Area"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Gets users with shared in room ID specified in request"
      }
    },
    "/api/2.0/people/theme": {
      "get": {
        "tags": [
          "People / Theme"
        ],
        "summary": "Get portal theme",
        "operationId": "getTheme",
        "responses": {
          "200": {
            "description": "Theme",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.Users.DarkThemeSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.Users.DarkThemeSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.Users.DarkThemeSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Returns a theme which is set to the current portal."
      },
      "put": {
        "tags": [
          "People / Theme"
        ],
        "summary": "Change portal theme",
        "operationId": "changeTheme",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.DarkThemeSettingsRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.DarkThemeSettingsRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.DarkThemeSettingsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Theme",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.Users.DarkThemeSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.Users.DarkThemeSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.Users.DarkThemeSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Changes the current portal theme."
      }
    },
    "/api/2.0/people/thirdparty/providers": {
      "get": {
        "tags": [
          "People / Third-party accounts"
        ],
        "summary": "Get third-party accounts",
        "operationId": "getAuthProviders",
        "parameters": [
          {
            "name": "inviteView",
            "in": "query",
            "description": "Specifies whether to return providers that are available for invitation links, i.e. the user can login or register through these providers",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "settingsView",
            "in": "query",
            "description": "Specifies whether to return URLs in the format that is used on the Settings page",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "clientCallback",
            "in": "query",
            "description": "Method that is called after authorization",
            "schema": {
              "type": "string",
              "example": "some text"
            }
          },
          {
            "name": "fromOnly",
            "in": "query",
            "description": "Provider name if the response only from this provider is needed",
            "schema": {
              "type": "string",
              "example": "some text"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of third-party accounts",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.AccountInfoDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.AccountInfoDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.AccountInfoDto"
                }
              }
            }
          }
        },
        "description": "Returns a list of the available third-party accounts."
      }
    },
    "/api/2.0/people/thirdparty/linkaccount": {
      "put": {
        "tags": [
          "People / Third-party accounts"
        ],
        "summary": "Link a third-pary account",
        "operationId": "linkAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.LinkAccountRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.LinkAccountRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.LinkAccountRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "405": {
            "description": "Error not allowed option"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Links a third-party account specified in the request to the user profile."
      }
    },
    "/api/2.0/people/thirdparty/signup": {
      "post": {
        "tags": [
          "People / Third-party accounts"
        ],
        "summary": "Create a third-pary account",
        "operationId": "signupAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.SignupAccountRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.SignupAccountRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.SignupAccountRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Incorrect email"
          },
          "403": {
            "description": "The invitation link is invalid or its validity has expired"
          }
        },
        "description": "Creates a third-party account with the parameters specified in the request."
      }
    },
    "/api/2.0/people/thirdparty/unlinkaccount": {
      "delete": {
        "tags": [
          "People / Third-party accounts"
        ],
        "summary": "Unlink a third-pary account",
        "operationId": "unlinkAccount",
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "description": "Provider name",
            "schema": {
              "type": "string",
              "example": "some text"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Unlinks a third-party account specified in the request from the user profile."
      }
    },
    "/api/2.0/people/reassign/progress/{userid}": {
      "get": {
        "tags": [
          "People / User data"
        ],
        "summary": "Get the reassignment progress",
        "operationId": "getReassignProgress",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID whose data is reassigned",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "864deb32-e2d1-41a7-8530-42ee031e88a4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reassignment progress",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.TaskProgressResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.TaskProgressResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.TaskProgressResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Returns the progress of the started data reassignment for the user with the ID specified in the request."
      }
    },
    "/api/2.0/people/reassign/start": {
      "post": {
        "tags": [
          "People / User data"
        ],
        "summary": "Start the data reassignment",
        "operationId": "startReassign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.StartReassignRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.StartReassignRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.StartReassignRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reassignment progress",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.TaskProgressResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.TaskProgressResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.TaskProgressResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Can not reassign data to user or from user"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Starts the data reassignment for the user with the ID specified in the request."
      }
    },
    "/api/2.0/people/reassign/terminate": {
      "put": {
        "tags": [
          "People / User data"
        ],
        "summary": "Terminate the data reassignment",
        "operationId": "terminateReassign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.TerminateRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.TerminateRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.TerminateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reassignment progress",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.TaskProgressResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.TaskProgressResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.TaskProgressResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Terminates the data reassignment for the user with the ID specified in the request."
      }
    },
    "/api/2.0/people/remove/progress/{userid}": {
      "get": {
        "tags": [
          "People / User data"
        ],
        "summary": "Get the deletion progress",
        "operationId": "getRemoveProgress",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID whose data is reassigned",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "af5408a0-556e-4672-a88d-97d1a48b3a8f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion progress",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.TaskProgressResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.TaskProgressResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.TaskProgressResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Returns the progress of the started data deletion for the user with the ID specified in the request."
      }
    },
    "/api/2.0/people/self/delete": {
      "put": {
        "tags": [
          "People / User data"
        ],
        "summary": "Send the deletion instructions",
        "operationId": "sendInstructionsToDelete",
        "responses": {
          "200": {
            "description": "Information message",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Sends instructions for deleting a user profile."
      }
    },
    "/api/2.0/people/remove/start": {
      "post": {
        "tags": [
          "People / User data"
        ],
        "summary": "Start the data deletion",
        "operationId": "startRemove",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.TerminateRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.TerminateRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.TerminateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deletion progress",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.TaskProgressResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.TaskProgressResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.People.ApiModels.ResponseDto.TaskProgressResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "User exception"
          },
          "403": {
            "description": "No permissions to perform this action"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Starts the data deletion for the user with the ID specified in the request."
      }
    },
    "/api/2.0/people/remove/terminate": {
      "put": {
        "tags": [
          "People / User data"
        ],
        "summary": "Terminate the data deletion",
        "operationId": "terminateRemove",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.TerminateRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.TerminateRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.TerminateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Terminates the data deletion for the user with the ID specified in the request."
      }
    },
    "/api/2.0/people/status/{status}": {
      "get": {
        "tags": [
          "People / User status"
        ],
        "summary": "Get profiles by status",
        "operationId": "getByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "User status",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Users.EmployeeStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Returns a list of profiles filtered by user status."
      },
      "put": {
        "tags": [
          "People / User status"
        ],
        "summary": "Change a user status",
        "operationId": "updateUserStatus",
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "New user status",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Users.EmployeeStatus"
            }
          }
        ],
        "requestBody": {
          "description": "Update members",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of users with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Changes a status for the users with the IDs specified in the request."
      }
    },
    "/api/2.0/people/activationstatus/{activationstatus}": {
      "put": {
        "tags": [
          "People / User status"
        ],
        "summary": "Set an activation status to the users",
        "operationId": "updateEmployeeActivationStatus",
        "parameters": [
          {
            "name": "activationstatus",
            "in": "path",
            "description": "Activation status",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Users.EmployeeActivationStatus"
            }
          }
        ],
        "requestBody": {
          "description": "Update members",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of users with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Sets the required activation status to the list of users with the IDs specified in the request."
      }
    },
    "/api/2.0/people/type/{type}": {
      "put": {
        "tags": [
          "People / User type"
        ],
        "summary": "Change a user type",
        "operationId": "updateUserType",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "New user type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Users.EmployeeType"
            }
          }
        ],
        "requestBody": {
          "description": "Update members",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of users with the detailed information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Changes a type for the users with the IDs specified in the request."
      }
    }
  },
  "components": {
    "schemas": {
      "ASC.Api.Core.ApiDateTime": {
        "type": "object",
        "properties": {
          "utcTime": {
            "type": "string",
            "description": "UtcTime",
            "format": "date-time",
            "readOnly": true,
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "timeZoneOffset": {
            "type": "string",
            "description": "TimeZoneOffset",
            "format": "date-span",
            "readOnly": true,
            "example": "00:00:00"
          }
        },
        "additionalProperties": false
      },
      "ASC.Common.Threading.DistributedTaskStatus": {
        "oneOf": [
          {
            "enum": [
              "Created",
              "Running",
              "Completed",
              "Canceled",
              "Failted"
            ],
            "type": "string",
            "description": "[Created - Created, Running - Running, Completed - Completed, Canceled - Canceled, Failted - Failted]",
            "example": "Created"
          },
          {
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "type": "integer",
            "description": "[0 - Created, 1 - Running, 2 - Completed, 3 - Canceled, 4 - Failted]",
            "example": 0
          }
        ]
      },
      "ASC.Core.AccountLoginType": {
        "oneOf": [
          {
            "enum": [
              "SSO",
              "LDAP",
              "Standart"
            ],
            "type": "string",
            "description": "[SSO - SSO, LDAP - LDAP, Standart - Standart]",
            "example": "SSO"
          },
          {
            "enum": [
              0,
              1,
              2
            ],
            "type": "integer",
            "description": "[0 - SSO, 1 - LDAP, 2 - Standart]",
            "example": 0
          }
        ]
      },
      "ASC.Core.Common.Core.Area": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ASC.Core.Payments": {
        "oneOf": [
          {
            "enum": [
              "Paid",
              "Free"
            ],
            "type": "string",
            "description": "[Paid - Paid, Free - Free]",
            "example": "Paid"
          },
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "description": "[0 - Paid, 1 - Free]",
            "example": 0
          }
        ]
      },
      "ASC.Core.QuotaFilter": {
        "oneOf": [
          {
            "enum": [
              "All",
              "Default",
              "Custom"
            ],
            "type": "string",
            "description": "[All - All, Default - Default, Custom - Custom]",
            "example": "All"
          },
          {
            "enum": [
              0,
              1,
              2
            ],
            "type": "integer",
            "description": "[0 - All, 1 - Default, 2 - Custom]",
            "example": 0
          }
        ]
      },
      "ASC.Core.Users.EmployeeActivationStatus": {
        "oneOf": [
          {
            "enum": [
              "NotActivated",
              "Activated",
              "Pending",
              "AutoGenerated"
            ],
            "type": "string",
            "description": "[NotActivated - Not activated, Activated - Activated, Pending - Pending, AutoGenerated - Auto generated]",
            "example": "NotActivated"
          },
          {
            "enum": [
              0,
              1,
              2,
              4
            ],
            "type": "integer",
            "description": "[0 - Not activated, 1 - Activated, 2 - Pending, 4 - Auto generated]",
            "example": 0
          }
        ]
      },
      "ASC.Core.Users.EmployeeStatus": {
        "oneOf": [
          {
            "enum": [
              "Active",
              "Terminated",
              "Pending",
              "Default",
              "All"
            ],
            "type": "string",
            "description": "[Active - Active, Terminated - Terminated, Pending - Pending, Default - Default, All - All]",
            "example": "Active"
          },
          {
            "enum": [
              1,
              2,
              4,
              5,
              7
            ],
            "type": "integer",
            "description": "[1 - Active, 2 - Terminated, 4 - Pending, 5 - Default, 7 - All]",
            "example": 1
          }
        ]
      },
      "ASC.Core.Users.EmployeeType": {
        "oneOf": [
          {
            "enum": [
              "All",
              "RoomAdmin",
              "Guest",
              "DocSpaceAdmin",
              "User"
            ],
            "type": "string",
            "description": "[All - All, RoomAdmin - Room admin, Guest - Guest, DocSpaceAdmin - DocSpace admin, User - User]",
            "example": "All"
          },
          {
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "type": "integer",
            "description": "[0 - All, 1 - Room admin, 2 - Guest, 3 - DocSpace admin, 4 - User]",
            "example": 0
          }
        ]
      },
      "ASC.Core.Users.MobilePhoneActivationStatus": {
        "oneOf": [
          {
            "enum": [
              "NotActivated",
              "Activated"
            ],
            "type": "string",
            "description": "[NotActivated - Not activated, Activated - Activated]",
            "example": "NotActivated"
          },
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "description": "[0 - Not activated, 1 - Activated]",
            "example": 0
          }
        ]
      },
      "ASC.People.ApiModels.RequestDto.ContactsRequest": {
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Web.Api.Models.Contact"
            },
            "description": "List of user contacts",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Parameters for updating user contacts"
      },
      "ASC.People.ApiModels.RequestDto.DarkThemeSettingsRequestDto": {
        "type": "object",
        "properties": {
          "theme": {
            "$ref": "#/components/schemas/ASC.Web.Core.Users.DarkThemeSettingsType"
          }
        },
        "additionalProperties": false,
        "description": "Theme settings request parameters"
      },
      "ASC.People.ApiModels.RequestDto.EmailMemberRequestDto": {
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Email",
            "format": "email",
            "nullable": true,
            "example": "Meggie_Abshire25@yahoo.com"
          }
        },
        "additionalProperties": false,
        "description": "Member request parameters"
      },
      "ASC.People.ApiModels.RequestDto.GroupRequestDto": {
        "type": "object",
        "properties": {
          "groupManager": {
            "type": "string",
            "description": "Group manager ID",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "groupName": {
            "type": "string",
            "description": "Group name",
            "nullable": true,
            "example": "some text"
          },
          "members": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of group member IDs",
            "nullable": true,
            "example": [
              "75a5f745-f697-4418-b38d-0fe0d277e258"
            ]
          }
        },
        "additionalProperties": false,
        "description": "Group request parameters"
      },
      "ASC.People.ApiModels.RequestDto.InviteUsersRequestDto": {
        "required": [
          "invitations"
        ],
        "type": "object",
        "properties": {
          "invitations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.UserInvitation"
            },
            "description": "List of user invitations"
          },
          "culture": {
            "type": "string",
            "description": "Culture",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters for inviting users"
      },
      "ASC.People.ApiModels.RequestDto.LinkAccountRequestDto": {
        "type": "object",
        "properties": {
          "serializedProfile": {
            "type": "string",
            "description": "Third-party profile in the serialized format",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters for linking accounts"
      },
      "ASC.People.ApiModels.RequestDto.MemberBaseRequestDto": {
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Email",
            "format": "email",
            "nullable": true,
            "example": "Daisha_Pagac@hotmail.com"
          },
          "password": {
            "type": "string",
            "description": "Password",
            "nullable": true,
            "example": "NXAiQgPH4K"
          },
          "passwordHash": {
            "type": "string",
            "description": "Password hash",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters for setting new password"
      },
      "ASC.People.ApiModels.RequestDto.MemberRequestDto": {
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Email",
            "format": "email",
            "nullable": true,
            "example": "Jamir.Bergnaum@hotmail.com"
          },
          "password": {
            "type": "string",
            "description": "Password",
            "nullable": true,
            "example": "bgsEgi9U9R"
          },
          "passwordHash": {
            "type": "string",
            "description": "Password hash",
            "nullable": true,
            "example": "some text"
          },
          "type": {
            "$ref": "#/components/schemas/ASC.Core.Users.EmployeeType"
          },
          "isUser": {
            "type": "boolean",
            "description": "Specifies if this is a guest or a user",
            "nullable": true,
            "example": true
          },
          "firstName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "First name",
            "nullable": true,
            "example": "Luisa"
          },
          "lastName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Last name",
            "nullable": true,
            "example": "Terry"
          },
          "department": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of user departments",
            "nullable": true,
            "example": [
              "75a5f745-f697-4418-b38d-0fe0d277e258"
            ]
          },
          "title": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Title",
            "nullable": true,
            "example": "bypass_upward_trending_navigating"
          },
          "location": {
            "type": "string",
            "description": "Location",
            "nullable": true,
            "example": "15357 Daugherty Locks, Hettiehaven, French Guiana"
          },
          "sex": {
            "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.SexEnum"
          },
          "birthday": {
            "$ref": "#/components/schemas/ASC.Api.Core.ApiDateTime"
          },
          "worksfrom": {
            "$ref": "#/components/schemas/ASC.Api.Core.ApiDateTime"
          },
          "comment": {
            "type": "string",
            "description": "Comment",
            "nullable": true,
            "example": "some text"
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Web.Api.Models.Contact"
            },
            "description": "List of user contacts",
            "nullable": true
          },
          "files": {
            "type": "string",
            "description": "Avatar photo URL",
            "nullable": true,
            "example": "some text"
          },
          "fromInviteLink": {
            "type": "boolean",
            "description": "Specifies if the user is added via the invitation link or not",
            "example": true
          },
          "key": {
            "type": "string",
            "description": "Key",
            "nullable": true,
            "example": "some text"
          },
          "cultureName": {
            "type": "string",
            "description": "Language",
            "nullable": true,
            "example": "some text"
          },
          "target": {
            "type": "string",
            "description": "Target",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "spam": {
            "type": "boolean",
            "description": "Spam",
            "nullable": true,
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Member request parameters"
      },
      "ASC.People.ApiModels.RequestDto.MembersRequest": {
        "type": "object",
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of group member IDs",
            "nullable": true,
            "example": [
              "75a5f745-f697-4418-b38d-0fe0d277e258"
            ]
          }
        },
        "additionalProperties": false,
        "description": "Group request parameters"
      },
      "ASC.People.ApiModels.RequestDto.SetManagerRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID",
            "format": "uuid",
            "example": "7c9f3a97-2cb4-4f14-9470-064cbb4a6317"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters for setting a group manager"
      },
      "ASC.People.ApiModels.RequestDto.SexEnum": {
        "oneOf": [
          {
            "enum": [
              "Female",
              "Male"
            ],
            "type": "string",
            "description": "[Female - Female, Male - Male]",
            "example": "Female"
          },
          {
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "description": "[0 - Female, 1 - Male]",
            "example": 0
          }
        ]
      },
      "ASC.People.ApiModels.RequestDto.SignupAccountRequestDto": {
        "type": "object",
        "properties": {
          "serializedProfile": {
            "type": "string",
            "description": "Third-party profile in the serialized format",
            "nullable": true,
            "example": "some text"
          },
          "employeeType": {
            "$ref": "#/components/schemas/ASC.Core.Users.EmployeeType"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "nullable": true,
            "example": "Ayana"
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "nullable": true,
            "example": "Considine"
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "format": "email",
            "nullable": true,
            "example": "Aleen35@gmail.com"
          },
          "passwordHash": {
            "type": "string",
            "description": "Password hash",
            "nullable": true,
            "example": "some text"
          },
          "key": {
            "type": "string",
            "description": "Link key",
            "nullable": true,
            "example": "some text"
          },
          "culture": {
            "type": "string",
            "description": "Culture",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters for creating a third-party account"
      },
      "ASC.People.ApiModels.RequestDto.StartReassignRequestDto": {
        "type": "object",
        "properties": {
          "fromUserId": {
            "type": "string",
            "description": "User ID whose data will be reassigned to another user",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "toUserId": {
            "type": "string",
            "description": "User ID to whom all the data will be reassigned",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "deleteProfile": {
            "type": "boolean",
            "description": "Specifies whether to delete a profile when the data reassignment will be finished or not",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Request parameters for starting the reassignment process"
      },
      "ASC.People.ApiModels.RequestDto.TerminateRequestDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID whose data is reassigned/removed",
            "format": "uuid",
            "example": "286329ac-8821-4c5a-b8e5-d70617a530e3"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters for terminating the reassignment process"
      },
      "ASC.People.ApiModels.RequestDto.ThumbnailsRequest": {
        "type": "object",
        "properties": {
          "tmpFile": {
            "type": "string",
            "description": "Path to the temporary file",
            "nullable": true,
            "example": "some text"
          },
          "x": {
            "type": "integer",
            "description": "Horizontal coordinate",
            "format": "int32",
            "example": 1234
          },
          "y": {
            "type": "integer",
            "description": "Vertical coordinate",
            "format": "int32",
            "example": 1234
          },
          "width": {
            "type": "integer",
            "description": "Thumbnail width",
            "format": "int32",
            "example": 1234
          },
          "height": {
            "type": "integer",
            "description": "Thumbnail height",
            "format": "int32",
            "example": 1234
          }
        },
        "additionalProperties": false,
        "description": "Thumbnail request parameters"
      },
      "ASC.People.ApiModels.RequestDto.UpdateGroupRequest": {
        "type": "object",
        "properties": {
          "groupManager": {
            "type": "string",
            "description": "Group manager ID",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "groupName": {
            "type": "string",
            "description": "Group name",
            "nullable": true,
            "example": "some text"
          },
          "membersToAdd": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of user IDs to add to the group",
            "nullable": true,
            "example": [
              "75a5f745-f697-4418-b38d-0fe0d277e258"
            ]
          },
          "membersToRemove": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of user IDs to remove from the group",
            "nullable": true,
            "example": [
              "75a5f745-f697-4418-b38d-0fe0d277e258"
            ]
          }
        },
        "additionalProperties": false,
        "description": "Group request parameters"
      },
      "ASC.People.ApiModels.RequestDto.UpdateMemberRequestDto": {
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Email",
            "format": "email",
            "nullable": true,
            "example": "Karelle39@hotmail.com"
          },
          "password": {
            "type": "string",
            "description": "Password",
            "nullable": true,
            "example": "AeCNAMskLg"
          },
          "passwordHash": {
            "type": "string",
            "description": "Password hash",
            "nullable": true,
            "example": "some text"
          },
          "type": {
            "$ref": "#/components/schemas/ASC.Core.Users.EmployeeType"
          },
          "isUser": {
            "type": "boolean",
            "description": "Specifies if this is a guest or a user",
            "nullable": true,
            "example": true
          },
          "firstName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "First name",
            "nullable": true,
            "example": "Glennie"
          },
          "lastName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Last name",
            "nullable": true,
            "example": "Torphy"
          },
          "department": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of user departments",
            "nullable": true,
            "example": [
              "75a5f745-f697-4418-b38d-0fe0d277e258"
            ]
          },
          "title": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Title",
            "nullable": true,
            "example": "licensed_wooden_bacon_payment_synthesizing"
          },
          "location": {
            "type": "string",
            "description": "Location",
            "nullable": true,
            "example": "020 Thiel Mount, East Kamryn, China"
          },
          "sex": {
            "$ref": "#/components/schemas/ASC.People.ApiModels.RequestDto.SexEnum"
          },
          "birthday": {
            "$ref": "#/components/schemas/ASC.Api.Core.ApiDateTime"
          },
          "worksfrom": {
            "$ref": "#/components/schemas/ASC.Api.Core.ApiDateTime"
          },
          "comment": {
            "type": "string",
            "description": "Comment",
            "nullable": true,
            "example": "some text"
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Web.Api.Models.Contact"
            },
            "description": "List of user contacts",
            "nullable": true
          },
          "files": {
            "type": "string",
            "description": "Avatar photo URL",
            "nullable": true,
            "example": "some text"
          },
          "fromInviteLink": {
            "type": "boolean",
            "description": "Specifies if the user is added via the invitation link or not",
            "example": true
          },
          "key": {
            "type": "string",
            "description": "Key",
            "nullable": true,
            "example": "some text"
          },
          "cultureName": {
            "type": "string",
            "description": "Language",
            "nullable": true,
            "example": "some text"
          },
          "target": {
            "type": "string",
            "description": "Target",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "spam": {
            "type": "boolean",
            "description": "Spam",
            "nullable": true,
            "example": true
          },
          "userId": {
            "type": "string",
            "description": "User ID",
            "nullable": true,
            "example": "6177"
          },
          "disable": {
            "type": "boolean",
            "description": "Specifies whether to disable a user or not",
            "nullable": true,
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Request parameters for updating user information"
      },
      "ASC.People.ApiModels.RequestDto.UpdateMembersQuotaRequestDto": {
        "type": "object",
        "properties": {
          "userIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of user IDs",
            "nullable": true,
            "example": [
              "75a5f745-f697-4418-b38d-0fe0d277e258"
            ]
          },
          "quota": {
            "oneOf": [
              {
                "type": "integer",
                "example": 1234
              },
              {
                "type": "string",
                "example": "some text"
              }
            ],
            "description": "Quota"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters for updating user information"
      },
      "ASC.People.ApiModels.RequestDto.UpdateMembersRequestDto": {
        "type": "object",
        "properties": {
          "userIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of user IDs",
            "nullable": true,
            "example": [
              "75a5f745-f697-4418-b38d-0fe0d277e258"
            ]
          },
          "resendAll": {
            "type": "boolean",
            "description": "Specifies whether to resend invitation letters to all the users or not",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Request parameters for updating user information"
      },
      "ASC.People.ApiModels.RequestDto.UpdatePhotoMemberRequest": {
        "type": "object",
        "properties": {
          "files": {
            "type": "string",
            "description": "Avatar photo URL",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters for updating user photo"
      },
      "ASC.People.ApiModels.RequestDto.UserInvitation": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address",
            "format": "email",
            "nullable": true,
            "example": "Rafael.Welch@gmail.com"
          },
          "type": {
            "$ref": "#/components/schemas/ASC.Core.Users.EmployeeType"
          }
        },
        "additionalProperties": false
      },
      "ASC.People.ApiModels.ResponseDto.AccountInfoDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "Provider",
            "nullable": true,
            "example": "some text"
          },
          "url": {
            "type": "string",
            "description": "URL",
            "format": "uri",
            "nullable": true,
            "example": "some text"
          },
          "linked": {
            "type": "boolean",
            "description": "Specifies if an account is linked or not",
            "example": true
          },
          "class": {
            "type": "string",
            "description": "Class",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.People.ApiModels.ResponseDto.FileUploadResultDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Specifies if the operation is successful or not",
            "example": true
          },
          "data": {
            "description": "Data",
            "nullable": true,
            "example": {
              "int": 1234,
              "string": "some text",
              "boolean": true
            }
          },
          "message": {
            "type": "string",
            "description": "Message",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false,
        "description": "File upload result dto"
      },
      "ASC.People.ApiModels.ResponseDto.GroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true,
            "example": "Micheal Mante"
          },
          "parent": {
            "type": "string",
            "description": "Parent",
            "format": "uuid",
            "nullable": true,
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "category": {
            "type": "string",
            "description": "Category",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "id": {
            "type": "string",
            "description": "ID",
            "format": "uuid",
            "example": "a25d99c5-ce9c-4f00-98c4-999c52bdf5c6"
          },
          "isLDAP": {
            "type": "boolean",
            "description": "Specifies if the LDAP settings are enabled for the group or not",
            "example": true
          },
          "manager": {
            "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeFullDto"
            },
            "description": "List of members",
            "nullable": true
          },
          "shared": {
            "type": "boolean",
            "description": "Shared",
            "nullable": true,
            "example": true
          },
          "membersCount": {
            "type": "integer",
            "description": "Members count",
            "format": "int32",
            "example": 1234
          }
        },
        "additionalProperties": false
      },
      "ASC.People.ApiModels.ResponseDto.TaskProgressResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID",
            "nullable": true,
            "example": "90"
          },
          "error": {
            "type": "string",
            "description": "Error",
            "nullable": true,
            "example": "some text"
          },
          "percentage": {
            "type": "integer",
            "description": "Percentage",
            "format": "int32",
            "example": 1234
          },
          "isCompleted": {
            "type": "boolean",
            "description": "IsCompleted",
            "example": true
          },
          "status": {
            "$ref": "#/components/schemas/ASC.Common.Threading.DistributedTaskStatus"
          }
        },
        "additionalProperties": false
      },
      "ASC.People.ApiModels.ResponseDto.ThumbnailsDataDto": {
        "type": "object",
        "properties": {
          "original": {
            "type": "string",
            "description": "Original photo",
            "nullable": true,
            "example": "default_user_photo_size_1280-1280.png"
          },
          "retina": {
            "type": "string",
            "description": "Retina",
            "nullable": true,
            "example": "default_user_photo_size_360-360.png"
          },
          "max": {
            "type": "string",
            "description": "Maximum size",
            "nullable": true,
            "example": "default_user_photo_size_200-200.png"
          },
          "big": {
            "type": "string",
            "description": "Big",
            "nullable": true,
            "example": "default_user_photo_size_82-82.png"
          },
          "medium": {
            "type": "string",
            "description": "Medium",
            "nullable": true,
            "example": "default_user_photo_size_48-48.png"
          },
          "small": {
            "type": "string",
            "description": "Small",
            "nullable": true,
            "example": "default_user_photo_size_32-32.png"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.Models.Contact": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Contact type",
            "nullable": true,
            "example": "GTalk"
          },
          "value": {
            "type": "string",
            "description": "Contact value",
            "nullable": true,
            "example": "my@gmail.com"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.Models.EmployeeDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID",
            "format": "uuid",
            "example": "{00000000-0000-0000-0000-000000000000}"
          },
          "displayName": {
            "type": "string",
            "description": "Display name",
            "nullable": true,
            "example": "Mike Zanyatski"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "nullable": true,
            "example": "Manager"
          },
          "avatar": {
            "type": "string",
            "description": "Avatar",
            "nullable": true,
            "example": "some text"
          },
          "avatarOriginal": {
            "type": "string",
            "description": "Original size avatar",
            "nullable": true,
            "example": "some text"
          },
          "avatarMax": {
            "type": "string",
            "description": "Maximum size avatar",
            "nullable": true,
            "example": "some text"
          },
          "avatarMedium": {
            "type": "string",
            "description": "Medium size avatar",
            "nullable": true,
            "example": "some text"
          },
          "avatarSmall": {
            "type": "string",
            "description": "Small avatar",
            "nullable": true,
            "example": "url to small avatar"
          },
          "profileUrl": {
            "type": "string",
            "description": "Profile URL",
            "nullable": true,
            "example": "some text"
          },
          "hasAvatar": {
            "type": "boolean",
            "description": "Specifies if the user has an avatar or not",
            "example": true
          },
          "isAnonim": {
            "type": "boolean",
            "description": "Specifies if the user is an anonim or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.Models.EmployeeFullDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID",
            "format": "uuid",
            "example": "{00000000-0000-0000-0000-000000000000}"
          },
          "displayName": {
            "type": "string",
            "description": "Display name",
            "nullable": true,
            "example": "Mike Zanyatski"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "nullable": true,
            "example": "Manager"
          },
          "avatar": {
            "type": "string",
            "description": "Avatar",
            "nullable": true,
            "example": "some text"
          },
          "avatarOriginal": {
            "type": "string",
            "description": "Original size avatar",
            "nullable": true,
            "example": "some text"
          },
          "avatarMax": {
            "type": "string",
            "description": "Maximum size avatar",
            "nullable": true,
            "example": "some text"
          },
          "avatarMedium": {
            "type": "string",
            "description": "Medium size avatar",
            "nullable": true,
            "example": "some text"
          },
          "avatarSmall": {
            "type": "string",
            "description": "Small avatar",
            "nullable": true,
            "example": "url to small avatar"
          },
          "profileUrl": {
            "type": "string",
            "description": "Profile URL",
            "nullable": true,
            "example": "some text"
          },
          "hasAvatar": {
            "type": "boolean",
            "description": "Specifies if the user has an avatar or not",
            "example": true
          },
          "isAnonim": {
            "type": "boolean",
            "description": "Specifies if the user is an anonim or not",
            "example": true
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "nullable": true,
            "example": "Mike"
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "nullable": true,
            "example": "Zanyatski"
          },
          "userName": {
            "type": "string",
            "description": "Username",
            "nullable": true,
            "example": "Mike.Zanyatski"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "format": "email",
            "nullable": true,
            "example": "my@gmail.com"
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Web.Api.Models.Contact"
            },
            "description": "List of contacts",
            "nullable": true
          },
          "birthday": {
            "$ref": "#/components/schemas/ASC.Api.Core.ApiDateTime"
          },
          "sex": {
            "type": "string",
            "description": "Sex",
            "nullable": true,
            "example": "male"
          },
          "status": {
            "$ref": "#/components/schemas/ASC.Core.Users.EmployeeStatus"
          },
          "activationStatus": {
            "$ref": "#/components/schemas/ASC.Core.Users.EmployeeActivationStatus"
          },
          "terminated": {
            "$ref": "#/components/schemas/ASC.Api.Core.ApiDateTime"
          },
          "department": {
            "type": "string",
            "description": "Department",
            "nullable": true,
            "example": "Marketing"
          },
          "workFrom": {
            "$ref": "#/components/schemas/ASC.Api.Core.ApiDateTime"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Web.Api.Models.GroupSummaryDto"
            },
            "description": "List of groups",
            "nullable": true
          },
          "location": {
            "type": "string",
            "description": "Location",
            "nullable": true,
            "example": "Palo Alto"
          },
          "notes": {
            "type": "string",
            "description": "Notes",
            "nullable": true,
            "example": "Notes to worker"
          },
          "isAdmin": {
            "type": "boolean",
            "description": "Specifies if the user is an administrator or not",
            "example": false
          },
          "isRoomAdmin": {
            "type": "boolean",
            "description": "Specifies if the user is a room administrator or not",
            "example": true
          },
          "isLDAP": {
            "type": "boolean",
            "description": "Specifies if the LDAP settings are enabled for the user or not",
            "example": false
          },
          "listAdminModules": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of administrator modules",
            "nullable": true,
            "example": "[\"projects\", \"crm\"]"
          },
          "isOwner": {
            "type": "boolean",
            "description": "Specifies if the user is a portal owner or not",
            "example": true
          },
          "isVisitor": {
            "type": "boolean",
            "description": "Specifies if the user is a portal visitor or not",
            "example": true
          },
          "isCollaborator": {
            "type": "boolean",
            "description": "Specifies if the user is a portal collaborator or not",
            "example": true
          },
          "cultureName": {
            "type": "string",
            "description": "Language",
            "nullable": true,
            "example": "en-EN"
          },
          "mobilePhone": {
            "type": "string",
            "description": "Mobile phone number",
            "nullable": true,
            "example": "some text"
          },
          "mobilePhoneActivationStatus": {
            "$ref": "#/components/schemas/ASC.Core.Users.MobilePhoneActivationStatus"
          },
          "isSSO": {
            "type": "boolean",
            "description": "Specifies if the SSO settings are enabled for the user or not",
            "example": false
          },
          "theme": {
            "$ref": "#/components/schemas/ASC.Web.Core.Users.DarkThemeSettingsType"
          },
          "quotaLimit": {
            "type": "integer",
            "description": "Quota limit",
            "format": "int64",
            "nullable": true,
            "example": 1234
          },
          "usedSpace": {
            "type": "number",
            "description": "Portal used space",
            "format": "double",
            "nullable": true,
            "example": 12345
          },
          "shared": {
            "type": "boolean",
            "description": "Shared",
            "nullable": true,
            "example": true
          },
          "isCustomQuota": {
            "type": "boolean",
            "description": "Specifies if the user has a custom quota or not",
            "nullable": true,
            "example": true
          },
          "loginEventId": {
            "type": "integer",
            "description": "Current login event ID",
            "format": "int32",
            "nullable": true,
            "example": 1234
          },
          "createdBy": {
            "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeDto"
          },
          "registrationDate": {
            "$ref": "#/components/schemas/ASC.Api.Core.ApiDateTime"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.Models.GroupSummaryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID",
            "format": "uuid",
            "example": "{00000000-0000-0000-0000-000000000000}"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true,
            "example": "Group Name"
          },
          "manager": {
            "type": "string",
            "description": "Manager",
            "nullable": true,
            "example": "Jake.Zazhitski"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Core.Users.DarkThemeSettings": {
        "type": "object",
        "properties": {
          "theme": {
            "$ref": "#/components/schemas/ASC.Web.Core.Users.DarkThemeSettingsType"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "ASC.Web.Core.Users.DarkThemeSettingsType": {
        "oneOf": [
          {
            "enum": [
              "Base",
              "Dark",
              "System"
            ],
            "type": "string",
            "description": "[Base - Base, Dark - Dark, System - System]",
            "example": "Base"
          },
          {
            "enum": [
              0,
              1,
              2
            ],
            "type": "integer",
            "description": "[0 - Base, 1 - Dark, 2 - System]",
            "example": 0
          }
        ]
      },
      "Microsoft.AspNetCore.Mvc.NoContentResult": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "example": 1234
          }
        },
        "additionalProperties": false
      },
      "System.Collections.Generic.KeyValuePair.System.String.Microsoft.Extensions.Primitives.StringValues": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true,
            "example": "some text"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "some text"
            ]
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "asc_auth_key": {
        "type": "apiKey",
        "name": "asc_auth_key",
        "in": "cookie"
      }
    }
  },
  "tags": [
    {
      "name": "Group",
      "description": "Operations for working with groups.",
      "x-displayName": "Group"
    },
    {
      "name": "Group / Rooms",
      "description": "Operations for getting groups with access rights to a room.",
      "x-displayName": "Rooms"
    },
    {
      "name": "People / Contacts",
      "description": "Operations for working with user contacts.",
      "x-displayName": "Contacts"
    },
    {
      "name": "People / Guests",
      "description": "Operations for workig with gursts",
      "x-displayName": "Guests"
    },
    {
      "name": "People / Password",
      "description": "Operations for working with user passwords.",
      "x-displayName": "Password"
    },
    {
      "name": "People / Photos",
      "description": "Operations for working with user photos.",
      "x-displayName": "Photos"
    },
    {
      "name": "People / Profiles",
      "description": "Operations  for working with user profiles.",
      "x-displayName": "Profiles"
    },
    {
      "name": "People / Quota",
      "description": "Operations for working with user quotas.",
      "x-displayName": "Quota"
    },
    {
      "name": "People / Search",
      "description": "Operations for searching users.",
      "x-displayName": "Search"
    },
    {
      "name": "People / Theme",
      "description": "Operations for working with portal theme.",
      "x-displayName": "Theme"
    },
    {
      "name": "People / Third-party accounts",
      "description": "Operations for working with third-party accounts.",
      "x-displayName": "Third-party accounts"
    },
    {
      "name": "People / User data",
      "description": "Operations for working with user data.",
      "x-displayName": "User data"
    },
    {
      "name": "People / User status",
      "description": "Operations for working with user status.",
      "x-displayName": "User status"
    },
    {
      "name": "People / User type",
      "description": "Operations for working with user types.",
      "x-displayName": "User type"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Group",
      "tags": [
        "Group",
        "Group / Rooms"
      ]
    },
    {
      "name": "People",
      "tags": [
        "People / Contacts",
        "People / Guests",
        "People / Password",
        "People / Photos",
        "People / Profiles",
        "People / Quota",
        "People / Search",
        "People / Theme",
        "People / Third-party accounts",
        "People / User data",
        "People / User status",
        "People / User type"
      ]
    }
  ]
}