name: Build & Publish Api

run-name: "Publish (site_mode: ${{github.event.inputs.site_mode}})"

on:
  workflow_dispatch:
    inputs:
      site_mode:
        description: Site mode
        required: true
        default: testing
        type: choice
        options:
        #- development
        - testing
        - production
      chinese:
        description: 'Build chinese?'
        required: true
        default: false
        type: boolean

env:
  CN: ${{ github.event.inputs.chinese }}
  mode: ${{github.event.inputs.site_mode}}

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: npm install

    - name: Build Packages
      id: build
      run: |
        LOCALE="--locale en"
        SUB_ARGS=""

        # Build CN locale string
        if [[ "$CN" == "true" ]]; then
           LOCALE="$LOCALE --locale zh-CN"
           # Docusaurus link issues fix
           # NOTE: Should be remove after the issue is be fixed
           mkdir -p i18n/zh-CN/docusaurus-plugin-content-docs-api/current2
           cp -r site/** i18n/zh-CN/docusaurus-plugin-content-docs-api/current2
           cp -r i18n/zh-CN/docusaurus-plugin-content-docs-api/current/** i18n/zh-CN/docusaurus-plugin-content-docs-api/current2
           rm -rf i18n/zh-CN/docusaurus-plugin-content-docs-api/current
           mv i18n/zh-CN/docusaurus-plugin-content-docs-api/current2 i18n/zh-CN/docusaurus-plugin-content-docs-api/current
        fi

        # Build sub-arguments string
        [[ "$mode" == "testing" ]] && SUB_ARGS="--dev"

        NODE_OPTIONS="--max-old-space-size=12288" npm run build -- ${SUB_ARGS} ${LOCALE}
    
    - name: Configure AWS Environment
      env:
        AWS_ACCESS_KEY_PROD: ${{secrets.AWS_ACCESS_KEY_PROD}}
        AWS_SECRET_KEY_PROD: ${{secrets.AWS_SECRET_KEY_PROD}}
        AWS_DISTRIBUTION_ID_PROD: ${{secrets.AWS_DISTRIBUTION_ID_PROD}}
        AWS_ACCESS_KEY_TEST: ${{secrets.AWS_ACCESS_KEY_TEST}}
        AWS_SECRET_KEY_TEST: ${{secrets.AWS_SECRET_KEY_TEST}}
        AWS_DISTRIBUTION_ID_TEST: ${{secrets.AWS_DISTRIBUTION_ID_TEST}}
      run: |
        if [ "${mode}" = "production" ]; then
          echo "AWS_BUCKET_URL=s3://api2static.onlyoffice.com" >> "$GITHUB_ENV"
          echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_PROD}" >> "$GITHUB_ENV"
          echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_KEY_PROD}" >> "$GITHUB_ENV"
          echo "AWS_REGION=us-west-2" >> "$GITHUB_ENV"
          echo "AWS_DISTRIBUTION_ID=${AWS_DISTRIBUTION_ID_PROD}" >> "$GITHUB_ENV"
        elif [ "${mode}" = "testing" ]; then
          echo "AWS_BUCKET_URL=s3://api2static.teamlab.info" >> "$GITHUB_ENV"
          echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_TEST}" >> "$GITHUB_ENV"
          echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_KEY_TEST}" >> "$GITHUB_ENV"
          echo "AWS_DISTRIBUTION_ID=${AWS_DISTRIBUTION_ID_TEST}" >> "$GITHUB_ENV"
          echo "AWS_REGION=us-east-1" >> "$GITHUB_ENV"
        elif [ "${mode}" = "development" ]; then
          echo "Development bucket dose not exist"
          exit 1
        else
          echo "Invalid site mode: $m"
          exit 1
        fi

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{env.AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{env.AWS_REGION}}

    - name: Sync AWS Bucket
      id: sync
      working-directory: build
      run: |
          # Define all possible languages
          # EN all time build by default and not specifyed in this array
          ALL_LANGS=("zh-CN")

          # Languages that were actually built
          BUILT_LANGS=("en")  # Modify this dynamically
          # Add dynamically built languages
          [[ "$CN" == "true" ]] && BUILT_LANGS+=("zh-CN")

          # Generate exclusion flags
          EXCLUDE_FLAGS=()
          for lang in "${ALL_LANGS[@]}"; do
            should_exclude=true
            for lg in "${BUILT_LANGS[@]}"; do
              if [[ "$lang" == "$lg" ]]; then
                should_exclude=false
                break  # Stop checking once we find a match
              fi
            done

            if [[ "$should_exclude" == true ]]; then
              EXCLUDE_FLAGS+=("--exclude \"${lang}/*\"")
            fi
          done

          # Convert array to string
          EXCLUDE_STR=$(IFS=" " ; echo "${EXCLUDE_FLAGS[*]}")

          # Execute the sync command
          eval "aws s3 sync . ${{env.AWS_BUCKET_URL}} --include \"*\" --delete $EXCLUDE_STR"

          # Compress files more than 10mb manually
          echo "ðŸ”¹ Find files that more than 10MB"
          BUILD_DIR="."
          find "$BUILD_DIR" -type f \( -name "*.js" -o -name "*.json" -o -name "*.htm" \
            -o -name "*.html" -o -name "*.css" -o -name "*.bin" -o -name "*.wasm" -o -name "*.dic" -o -name "*.aff" -o -name "*.svg" \) \
            -size +10M \
            | while read -r file; do
            echo "ðŸ“¦ Compress: $file"
            gzip -9 -c "$file" > "$file.gz" && mv "$file.gz" "$file"
            MIME_TYPE=$(file --mime-type -b "$file")
            echo "ðŸš€ Upload compressed file to s3: $file"
            aws s3 cp "$file" "${{ env.AWS_BUCKET_URL }}/${file#./}" \
            --content-encoding gzip --content-type "$MIME_TYPE"
          done

    - name: Invalidate AWS CloudFront Cache
      run: aws cloudfront create-invalidation --distribution-id ${{env.AWS_DISTRIBUTION_ID}} --paths '/*'

    - name: Collect statuses
      if: always()
      env:
        BUILD_STATUS: ${{ steps.build.outcome }}
        SYNC_STATUS: ${{ steps.sync.outcome }}
      run: |
          if [[ "$BUILD_STATUS" == 'failure' ]]; then
             echo "BUILD_STATUS=failureðŸ”´" >> $GITHUB_ENV
             echo "SYNC_STATUS=skipped" >> $GITHUB_ENV
          fi
          if [[ "$BUILD_STATUS" == 'success' ]]; then
             echo "BUILD_STATUS=successðŸŸ¢" >> $GITHUB_ENV
             [[ "$SYNC_STATUS" == 'failure' ]] && echo "SYNC_STATUS=failureðŸ”´" >> $GITHUB_ENV
             [[ "$SYNC_STATUS" == 'success' ]] && echo "SYNC_STATUS=successðŸŸ¢" >> $GITHUB_ENV
          fi

    - name: Send alert message
      if: always()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
            ${{ github.actor }} created commit:
            Commit message: ${{ github.event.commits[0].message }}

            Repository: ${{ github.repository }}
            Action: ${{ github.event_name }}
            Workflow: ${{ github.workflow }}
            Mode: ${{ github.event.inputs.site_mode }}

            Api build status: ${{ env.BUILD_STATUS }}
            Api s3 sync status: ${{ env.SYNC_STATUS }}

            See commit changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
            See action run logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
