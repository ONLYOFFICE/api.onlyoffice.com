name: Build & Publish Api

run-name: "Publish (site_mode: ${{github.event.inputs.site_mode}})"

on:
  workflow_dispatch:
    inputs:
      site_mode:
        description: Site mode
        required: true
        default: testing
        type: choice
        options:
        #- development
        - testing
        - production
      english:
        description: 'Build english?'
        required: true
        default: true
        type: boolean
      chinese:
        description: 'Build chinese?'
        required: true
        default: false
        type: boolean

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: npm install

    - name: Build Packages
      id: build
      env:
        EN: ${{github.event.inputs.english}}
        CN: ${{github.event.inputs.chinese}}
      run: |
        SUB_PARAMETERS=""

        if [[ "$CN" == "true" && "$EN" == "true" ]]; then
           SUB_PARAMETERS="-- --locale en --locale zh-CN"
        elif [[ "$CN" == "true" ]]; then
           SUB_PARAMETERS="-- --locale zh-CN"
        elif [[ "$EN" == "true" ]]; then
           SUB_PARAMETERS="-- --locale en"
        fi

        NODE_OPTIONS="--max-old-space-size=12288" npm run build ${SUB_PARAMETERS}
    
    - name: Configure AWS Credentials
      env:
        mode: ${{github.event.inputs.site_mode}}
        AWS_ACCESS_KEY_PROD: ${{secrets.AWS_ACCESS_KEY_PROD}}
        AWS_SECRET_KEY_PROD: ${{secrets.AWS_SECRET_KEY_PROD}}
        AWS_DISTRIBUTION_ID_PROD: ${{secrets.AWS_DISTRIBUTION_ID_PROD}}
        AWS_ACCESS_KEY_TEST: ${{secrets.AWS_ACCESS_KEY_TEST}}
        AWS_SECRET_KEY_TEST: ${{secrets.AWS_SECRET_KEY_TEST}}
        AWS_DISTRIBUTION_ID_TEST: ${{secrets.AWS_DISTRIBUTION_ID_TEST}}
      run: |
        if [ "${mode}" = "production" ]; then
          echo "AWS_BUCKET_URL=s3://api2static.onlyoffice.com" >> "$GITHUB_ENV"
          echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_PROD}" >> "$GITHUB_ENV"
          echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_KEY_PROD}" >> "$GITHUB_ENV"
          echo "AWS_REGION=us-west-2" >> "$GITHUB_ENV"
          echo "AWS_DISTRIBUTION_ID=${AWS_DISTRIBUTION_ID_PROD}" >> "$GITHUB_ENV"
        elif [ "${mode}" = "testing" ]; then
          echo "AWS_BUCKET_URL=s3://api2static.teamlab.info" >> "$GITHUB_ENV"
          echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_TEST}" >> "$GITHUB_ENV"
          echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_KEY_TEST}" >> "$GITHUB_ENV"
          echo "AWS_DISTRIBUTION_ID=${AWS_DISTRIBUTION_ID_TEST}" >> "$GITHUB_ENV"
          echo "AWS_REGION=us-east-1" >> "$GITHUB_ENV"
        elif [ "${mode}" = "development" ]; then
          echo "Development bucket dose not exist"
          exit 1
        else
          echo "Invalid site mode: $m"
          exit 1
        fi

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{env.AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{env.AWS_REGION}}

    - name: Sync AWS Bucket
      id: sync
      working-directory: build
      run: aws s3 sync . ${{env.AWS_BUCKET_URL}} --delete

    - name: Invalidate AWS CloudFront Cache
      run: aws cloudfront create-invalidation --distribution-id ${{env.AWS_DISTRIBUTION_ID}} --paths '/*'

    - name: Collect statuses
      if: always()
      env:
        BUILD_STATUS: ${{ steps.build.outcome }}
        SYNC_STATUS: ${{ steps.sync.outcome }}
      run: |
          if [[ "$BUILD_STATUS" == 'failure' ]]; then
             echo "BUILD_STATUS=failureðŸ”´" >> $GITHUB_ENV
             echo "SYNC_STATUS=skipped" >> $GITHUB_ENV
          fi
          if [[ "$BUILD_STATUS" == 'success' ]]; then
             echo "BUILD_STATUS=successðŸŸ¢" >> $GITHUB_ENV
             [[ "$SYNC_STATUS" == 'failure' ]] && echo "SYNC_STATUS=failureðŸ”´" >> $GITHUB_ENV
             [[ "$SYNC_STATUS" == 'success' ]] && echo "SYNC_STATUS=successðŸŸ¢" >> $GITHUB_ENV
          fi

    - name: send default message
      if: always()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
            ${{ github.actor }} created commit:
            Commit message: ${{ github.event.commits[0].message }}

            Repository: ${{ github.repository }}
            Action: ${{ github.event_name }}
            Workflow: ${{ github.workflow }}
            Mode: ${{ github.event.inputs.site_mode }}

            Api build status: ${{ env.BUILD_STATUS }}
            Api s3 sync status: ${{ env.SYNC_STATUS }}

            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
